// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sprout.Service;

#nullable disable

namespace Sprout.Service.Migrations
{
    [DbContext(typeof(PlantDb))]
    [Migration("20241211174851_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sprout.Service.garden", b =>
                {
                    b.Property<int>("gardenid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("gardenid"));

                    b.Property<string>("notes")
                        .HasColumnType("text");

                    b.Property<int>("plantid")
                        .HasColumnType("integer");

                    b.Property<int>("plantqty")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("gardenid");

                    b.HasIndex("plantid");

                    b.HasIndex("userid");

                    b.ToTable("gardens");
                });

            modelBuilder.Entity("Sprout.Service.plant", b =>
                {
                    b.Property<int>("plantid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("plantid"));

                    b.Property<int?>("difficultylevel")
                        .HasColumnType("integer");

                    b.Property<string>("lightlevel")
                        .HasColumnType("text");

                    b.Property<string>("plantcare")
                        .HasColumnType("text");

                    b.Property<string>("plantdescription")
                        .HasColumnType("text");

                    b.Property<string>("plantimage1")
                        .HasColumnType("text");

                    b.Property<string>("plantimage2")
                        .HasColumnType("text");

                    b.Property<string>("plantimage3")
                        .HasColumnType("text");

                    b.Property<string>("plantmaturity")
                        .HasColumnType("text");

                    b.Property<string>("plantname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("planttype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("plantzone")
                        .HasColumnType("text");

                    b.Property<string>("scientificname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sowtype")
                        .HasColumnType("text");

                    b.Property<string>("waterlevel")
                        .HasColumnType("text");

                    b.HasKey("plantid");

                    b.ToTable("plants");
                });

            modelBuilder.Entity("Sprout.Service.user", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userid"));

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("userid");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Sprout.Service.garden", b =>
                {
                    b.HasOne("Sprout.Service.plant", "plant")
                        .WithMany("gardens")
                        .HasForeignKey("plantid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sprout.Service.user", "user")
                        .WithMany("gardens")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plant");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Sprout.Service.plant", b =>
                {
                    b.Navigation("gardens");
                });

            modelBuilder.Entity("Sprout.Service.user", b =>
                {
                    b.Navigation("gardens");
                });
#pragma warning restore 612, 618
        }
    }
}
